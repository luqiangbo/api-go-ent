// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-go-ent/ent/fruitprice"
	"api-go-ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFruitPrice = "FruitPrice"
)

// FruitPriceMutation represents an operation that mutates the FruitPrice nodes in the graph.
type FruitPriceMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	deleted_at    *time.Time
	name          *string
	price         *float64
	addprice      *float64
	unit          *string
	remark        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FruitPrice, error)
	predicates    []predicate.FruitPrice
}

var _ ent.Mutation = (*FruitPriceMutation)(nil)

// fruitpriceOption allows management of the mutation configuration using functional options.
type fruitpriceOption func(*FruitPriceMutation)

// newFruitPriceMutation creates new mutation for the FruitPrice entity.
func newFruitPriceMutation(c config, op Op, opts ...fruitpriceOption) *FruitPriceMutation {
	m := &FruitPriceMutation{
		config:        c,
		op:            op,
		typ:           TypeFruitPrice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFruitPriceID sets the ID field of the mutation.
func withFruitPriceID(id uuid.UUID) fruitpriceOption {
	return func(m *FruitPriceMutation) {
		var (
			err   error
			once  sync.Once
			value *FruitPrice
		)
		m.oldValue = func(ctx context.Context) (*FruitPrice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FruitPrice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFruitPrice sets the old FruitPrice of the mutation.
func withFruitPrice(node *FruitPrice) fruitpriceOption {
	return func(m *FruitPriceMutation) {
		m.oldValue = func(context.Context) (*FruitPrice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FruitPriceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FruitPriceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FruitPrice entities.
func (m *FruitPriceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FruitPriceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FruitPriceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FruitPrice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FruitPriceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FruitPriceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FruitPrice entity.
// If the FruitPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FruitPriceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FruitPriceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FruitPriceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FruitPriceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FruitPrice entity.
// If the FruitPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FruitPriceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FruitPriceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *FruitPriceMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *FruitPriceMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the FruitPrice entity.
// If the FruitPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FruitPriceMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *FruitPriceMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[fruitprice.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *FruitPriceMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[fruitprice.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *FruitPriceMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, fruitprice.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *FruitPriceMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *FruitPriceMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the FruitPrice entity.
// If the FruitPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FruitPriceMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *FruitPriceMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[fruitprice.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *FruitPriceMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[fruitprice.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *FruitPriceMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, fruitprice.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FruitPriceMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FruitPriceMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the FruitPrice entity.
// If the FruitPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FruitPriceMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FruitPriceMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[fruitprice.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *FruitPriceMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[fruitprice.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FruitPriceMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, fruitprice.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *FruitPriceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FruitPriceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FruitPrice entity.
// If the FruitPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FruitPriceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FruitPriceMutation) ResetName() {
	m.name = nil
}

// SetPrice sets the "price" field.
func (m *FruitPriceMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *FruitPriceMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the FruitPrice entity.
// If the FruitPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FruitPriceMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *FruitPriceMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *FruitPriceMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *FruitPriceMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetUnit sets the "unit" field.
func (m *FruitPriceMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *FruitPriceMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the FruitPrice entity.
// If the FruitPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FruitPriceMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *FruitPriceMutation) ResetUnit() {
	m.unit = nil
}

// SetRemark sets the "remark" field.
func (m *FruitPriceMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *FruitPriceMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the FruitPrice entity.
// If the FruitPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FruitPriceMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *FruitPriceMutation) ResetRemark() {
	m.remark = nil
}

// Where appends a list predicates to the FruitPriceMutation builder.
func (m *FruitPriceMutation) Where(ps ...predicate.FruitPrice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FruitPriceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FruitPriceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FruitPrice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FruitPriceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FruitPriceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FruitPrice).
func (m *FruitPriceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FruitPriceMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, fruitprice.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, fruitprice.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, fruitprice.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, fruitprice.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, fruitprice.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, fruitprice.FieldName)
	}
	if m.price != nil {
		fields = append(fields, fruitprice.FieldPrice)
	}
	if m.unit != nil {
		fields = append(fields, fruitprice.FieldUnit)
	}
	if m.remark != nil {
		fields = append(fields, fruitprice.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FruitPriceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fruitprice.FieldCreatedAt:
		return m.CreatedAt()
	case fruitprice.FieldUpdatedAt:
		return m.UpdatedAt()
	case fruitprice.FieldCreatedBy:
		return m.CreatedBy()
	case fruitprice.FieldUpdatedBy:
		return m.UpdatedBy()
	case fruitprice.FieldDeletedAt:
		return m.DeletedAt()
	case fruitprice.FieldName:
		return m.Name()
	case fruitprice.FieldPrice:
		return m.Price()
	case fruitprice.FieldUnit:
		return m.Unit()
	case fruitprice.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FruitPriceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fruitprice.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case fruitprice.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case fruitprice.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case fruitprice.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case fruitprice.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case fruitprice.FieldName:
		return m.OldName(ctx)
	case fruitprice.FieldPrice:
		return m.OldPrice(ctx)
	case fruitprice.FieldUnit:
		return m.OldUnit(ctx)
	case fruitprice.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown FruitPrice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FruitPriceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fruitprice.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case fruitprice.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case fruitprice.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case fruitprice.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case fruitprice.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case fruitprice.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case fruitprice.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case fruitprice.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case fruitprice.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown FruitPrice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FruitPriceMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, fruitprice.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FruitPriceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fruitprice.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FruitPriceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fruitprice.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown FruitPrice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FruitPriceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fruitprice.FieldCreatedBy) {
		fields = append(fields, fruitprice.FieldCreatedBy)
	}
	if m.FieldCleared(fruitprice.FieldUpdatedBy) {
		fields = append(fields, fruitprice.FieldUpdatedBy)
	}
	if m.FieldCleared(fruitprice.FieldDeletedAt) {
		fields = append(fields, fruitprice.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FruitPriceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FruitPriceMutation) ClearField(name string) error {
	switch name {
	case fruitprice.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case fruitprice.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case fruitprice.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown FruitPrice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FruitPriceMutation) ResetField(name string) error {
	switch name {
	case fruitprice.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case fruitprice.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case fruitprice.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case fruitprice.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case fruitprice.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case fruitprice.FieldName:
		m.ResetName()
		return nil
	case fruitprice.FieldPrice:
		m.ResetPrice()
		return nil
	case fruitprice.FieldUnit:
		m.ResetUnit()
		return nil
	case fruitprice.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown FruitPrice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FruitPriceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FruitPriceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FruitPriceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FruitPriceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FruitPriceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FruitPriceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FruitPriceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FruitPrice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FruitPriceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FruitPrice edge %s", name)
}
