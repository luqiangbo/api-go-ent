// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-go-ent/ent/fruitprice"
	"api-go-ent/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FruitPriceUpdate is the builder for updating FruitPrice entities.
type FruitPriceUpdate struct {
	config
	hooks    []Hook
	mutation *FruitPriceMutation
}

// Where appends a list predicates to the FruitPriceUpdate builder.
func (fpu *FruitPriceUpdate) Where(ps ...predicate.FruitPrice) *FruitPriceUpdate {
	fpu.mutation.Where(ps...)
	return fpu
}

// SetUpdatedAt sets the "updated_at" field.
func (fpu *FruitPriceUpdate) SetUpdatedAt(t time.Time) *FruitPriceUpdate {
	fpu.mutation.SetUpdatedAt(t)
	return fpu
}

// SetCreatedBy sets the "created_by" field.
func (fpu *FruitPriceUpdate) SetCreatedBy(s string) *FruitPriceUpdate {
	fpu.mutation.SetCreatedBy(s)
	return fpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fpu *FruitPriceUpdate) SetNillableCreatedBy(s *string) *FruitPriceUpdate {
	if s != nil {
		fpu.SetCreatedBy(*s)
	}
	return fpu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (fpu *FruitPriceUpdate) ClearCreatedBy() *FruitPriceUpdate {
	fpu.mutation.ClearCreatedBy()
	return fpu
}

// SetUpdatedBy sets the "updated_by" field.
func (fpu *FruitPriceUpdate) SetUpdatedBy(s string) *FruitPriceUpdate {
	fpu.mutation.SetUpdatedBy(s)
	return fpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fpu *FruitPriceUpdate) SetNillableUpdatedBy(s *string) *FruitPriceUpdate {
	if s != nil {
		fpu.SetUpdatedBy(*s)
	}
	return fpu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fpu *FruitPriceUpdate) ClearUpdatedBy() *FruitPriceUpdate {
	fpu.mutation.ClearUpdatedBy()
	return fpu
}

// SetDeletedAt sets the "deleted_at" field.
func (fpu *FruitPriceUpdate) SetDeletedAt(t time.Time) *FruitPriceUpdate {
	fpu.mutation.SetDeletedAt(t)
	return fpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fpu *FruitPriceUpdate) SetNillableDeletedAt(t *time.Time) *FruitPriceUpdate {
	if t != nil {
		fpu.SetDeletedAt(*t)
	}
	return fpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fpu *FruitPriceUpdate) ClearDeletedAt() *FruitPriceUpdate {
	fpu.mutation.ClearDeletedAt()
	return fpu
}

// SetName sets the "name" field.
func (fpu *FruitPriceUpdate) SetName(s string) *FruitPriceUpdate {
	fpu.mutation.SetName(s)
	return fpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fpu *FruitPriceUpdate) SetNillableName(s *string) *FruitPriceUpdate {
	if s != nil {
		fpu.SetName(*s)
	}
	return fpu
}

// SetPrice sets the "price" field.
func (fpu *FruitPriceUpdate) SetPrice(f float64) *FruitPriceUpdate {
	fpu.mutation.ResetPrice()
	fpu.mutation.SetPrice(f)
	return fpu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (fpu *FruitPriceUpdate) SetNillablePrice(f *float64) *FruitPriceUpdate {
	if f != nil {
		fpu.SetPrice(*f)
	}
	return fpu
}

// AddPrice adds f to the "price" field.
func (fpu *FruitPriceUpdate) AddPrice(f float64) *FruitPriceUpdate {
	fpu.mutation.AddPrice(f)
	return fpu
}

// SetUnit sets the "unit" field.
func (fpu *FruitPriceUpdate) SetUnit(s string) *FruitPriceUpdate {
	fpu.mutation.SetUnit(s)
	return fpu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (fpu *FruitPriceUpdate) SetNillableUnit(s *string) *FruitPriceUpdate {
	if s != nil {
		fpu.SetUnit(*s)
	}
	return fpu
}

// SetRemark sets the "remark" field.
func (fpu *FruitPriceUpdate) SetRemark(s string) *FruitPriceUpdate {
	fpu.mutation.SetRemark(s)
	return fpu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fpu *FruitPriceUpdate) SetNillableRemark(s *string) *FruitPriceUpdate {
	if s != nil {
		fpu.SetRemark(*s)
	}
	return fpu
}

// Mutation returns the FruitPriceMutation object of the builder.
func (fpu *FruitPriceUpdate) Mutation() *FruitPriceMutation {
	return fpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fpu *FruitPriceUpdate) Save(ctx context.Context) (int, error) {
	fpu.defaults()
	return withHooks(ctx, fpu.sqlSave, fpu.mutation, fpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fpu *FruitPriceUpdate) SaveX(ctx context.Context) int {
	affected, err := fpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fpu *FruitPriceUpdate) Exec(ctx context.Context) error {
	_, err := fpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpu *FruitPriceUpdate) ExecX(ctx context.Context) {
	if err := fpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fpu *FruitPriceUpdate) defaults() {
	if _, ok := fpu.mutation.UpdatedAt(); !ok {
		v := fruitprice.UpdateDefaultUpdatedAt()
		fpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fpu *FruitPriceUpdate) check() error {
	if v, ok := fpu.mutation.Name(); ok {
		if err := fruitprice.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.name": %w`, err)}
		}
	}
	if v, ok := fpu.mutation.Price(); ok {
		if err := fruitprice.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.price": %w`, err)}
		}
	}
	if v, ok := fpu.mutation.Unit(); ok {
		if err := fruitprice.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.unit": %w`, err)}
		}
	}
	if v, ok := fpu.mutation.Remark(); ok {
		if err := fruitprice.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.remark": %w`, err)}
		}
	}
	return nil
}

func (fpu *FruitPriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fruitprice.Table, fruitprice.Columns, sqlgraph.NewFieldSpec(fruitprice.FieldID, field.TypeUUID))
	if ps := fpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fpu.mutation.UpdatedAt(); ok {
		_spec.SetField(fruitprice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fpu.mutation.CreatedBy(); ok {
		_spec.SetField(fruitprice.FieldCreatedBy, field.TypeString, value)
	}
	if fpu.mutation.CreatedByCleared() {
		_spec.ClearField(fruitprice.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fpu.mutation.UpdatedBy(); ok {
		_spec.SetField(fruitprice.FieldUpdatedBy, field.TypeString, value)
	}
	if fpu.mutation.UpdatedByCleared() {
		_spec.ClearField(fruitprice.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fpu.mutation.DeletedAt(); ok {
		_spec.SetField(fruitprice.FieldDeletedAt, field.TypeTime, value)
	}
	if fpu.mutation.DeletedAtCleared() {
		_spec.ClearField(fruitprice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fpu.mutation.Name(); ok {
		_spec.SetField(fruitprice.FieldName, field.TypeString, value)
	}
	if value, ok := fpu.mutation.Price(); ok {
		_spec.SetField(fruitprice.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := fpu.mutation.AddedPrice(); ok {
		_spec.AddField(fruitprice.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := fpu.mutation.Unit(); ok {
		_spec.SetField(fruitprice.FieldUnit, field.TypeString, value)
	}
	if value, ok := fpu.mutation.Remark(); ok {
		_spec.SetField(fruitprice.FieldRemark, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fruitprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fpu.mutation.done = true
	return n, nil
}

// FruitPriceUpdateOne is the builder for updating a single FruitPrice entity.
type FruitPriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FruitPriceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fpuo *FruitPriceUpdateOne) SetUpdatedAt(t time.Time) *FruitPriceUpdateOne {
	fpuo.mutation.SetUpdatedAt(t)
	return fpuo
}

// SetCreatedBy sets the "created_by" field.
func (fpuo *FruitPriceUpdateOne) SetCreatedBy(s string) *FruitPriceUpdateOne {
	fpuo.mutation.SetCreatedBy(s)
	return fpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fpuo *FruitPriceUpdateOne) SetNillableCreatedBy(s *string) *FruitPriceUpdateOne {
	if s != nil {
		fpuo.SetCreatedBy(*s)
	}
	return fpuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (fpuo *FruitPriceUpdateOne) ClearCreatedBy() *FruitPriceUpdateOne {
	fpuo.mutation.ClearCreatedBy()
	return fpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fpuo *FruitPriceUpdateOne) SetUpdatedBy(s string) *FruitPriceUpdateOne {
	fpuo.mutation.SetUpdatedBy(s)
	return fpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fpuo *FruitPriceUpdateOne) SetNillableUpdatedBy(s *string) *FruitPriceUpdateOne {
	if s != nil {
		fpuo.SetUpdatedBy(*s)
	}
	return fpuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fpuo *FruitPriceUpdateOne) ClearUpdatedBy() *FruitPriceUpdateOne {
	fpuo.mutation.ClearUpdatedBy()
	return fpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fpuo *FruitPriceUpdateOne) SetDeletedAt(t time.Time) *FruitPriceUpdateOne {
	fpuo.mutation.SetDeletedAt(t)
	return fpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fpuo *FruitPriceUpdateOne) SetNillableDeletedAt(t *time.Time) *FruitPriceUpdateOne {
	if t != nil {
		fpuo.SetDeletedAt(*t)
	}
	return fpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fpuo *FruitPriceUpdateOne) ClearDeletedAt() *FruitPriceUpdateOne {
	fpuo.mutation.ClearDeletedAt()
	return fpuo
}

// SetName sets the "name" field.
func (fpuo *FruitPriceUpdateOne) SetName(s string) *FruitPriceUpdateOne {
	fpuo.mutation.SetName(s)
	return fpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fpuo *FruitPriceUpdateOne) SetNillableName(s *string) *FruitPriceUpdateOne {
	if s != nil {
		fpuo.SetName(*s)
	}
	return fpuo
}

// SetPrice sets the "price" field.
func (fpuo *FruitPriceUpdateOne) SetPrice(f float64) *FruitPriceUpdateOne {
	fpuo.mutation.ResetPrice()
	fpuo.mutation.SetPrice(f)
	return fpuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (fpuo *FruitPriceUpdateOne) SetNillablePrice(f *float64) *FruitPriceUpdateOne {
	if f != nil {
		fpuo.SetPrice(*f)
	}
	return fpuo
}

// AddPrice adds f to the "price" field.
func (fpuo *FruitPriceUpdateOne) AddPrice(f float64) *FruitPriceUpdateOne {
	fpuo.mutation.AddPrice(f)
	return fpuo
}

// SetUnit sets the "unit" field.
func (fpuo *FruitPriceUpdateOne) SetUnit(s string) *FruitPriceUpdateOne {
	fpuo.mutation.SetUnit(s)
	return fpuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (fpuo *FruitPriceUpdateOne) SetNillableUnit(s *string) *FruitPriceUpdateOne {
	if s != nil {
		fpuo.SetUnit(*s)
	}
	return fpuo
}

// SetRemark sets the "remark" field.
func (fpuo *FruitPriceUpdateOne) SetRemark(s string) *FruitPriceUpdateOne {
	fpuo.mutation.SetRemark(s)
	return fpuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fpuo *FruitPriceUpdateOne) SetNillableRemark(s *string) *FruitPriceUpdateOne {
	if s != nil {
		fpuo.SetRemark(*s)
	}
	return fpuo
}

// Mutation returns the FruitPriceMutation object of the builder.
func (fpuo *FruitPriceUpdateOne) Mutation() *FruitPriceMutation {
	return fpuo.mutation
}

// Where appends a list predicates to the FruitPriceUpdate builder.
func (fpuo *FruitPriceUpdateOne) Where(ps ...predicate.FruitPrice) *FruitPriceUpdateOne {
	fpuo.mutation.Where(ps...)
	return fpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fpuo *FruitPriceUpdateOne) Select(field string, fields ...string) *FruitPriceUpdateOne {
	fpuo.fields = append([]string{field}, fields...)
	return fpuo
}

// Save executes the query and returns the updated FruitPrice entity.
func (fpuo *FruitPriceUpdateOne) Save(ctx context.Context) (*FruitPrice, error) {
	fpuo.defaults()
	return withHooks(ctx, fpuo.sqlSave, fpuo.mutation, fpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fpuo *FruitPriceUpdateOne) SaveX(ctx context.Context) *FruitPrice {
	node, err := fpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fpuo *FruitPriceUpdateOne) Exec(ctx context.Context) error {
	_, err := fpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpuo *FruitPriceUpdateOne) ExecX(ctx context.Context) {
	if err := fpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fpuo *FruitPriceUpdateOne) defaults() {
	if _, ok := fpuo.mutation.UpdatedAt(); !ok {
		v := fruitprice.UpdateDefaultUpdatedAt()
		fpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fpuo *FruitPriceUpdateOne) check() error {
	if v, ok := fpuo.mutation.Name(); ok {
		if err := fruitprice.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.name": %w`, err)}
		}
	}
	if v, ok := fpuo.mutation.Price(); ok {
		if err := fruitprice.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.price": %w`, err)}
		}
	}
	if v, ok := fpuo.mutation.Unit(); ok {
		if err := fruitprice.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.unit": %w`, err)}
		}
	}
	if v, ok := fpuo.mutation.Remark(); ok {
		if err := fruitprice.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.remark": %w`, err)}
		}
	}
	return nil
}

func (fpuo *FruitPriceUpdateOne) sqlSave(ctx context.Context) (_node *FruitPrice, err error) {
	if err := fpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fruitprice.Table, fruitprice.Columns, sqlgraph.NewFieldSpec(fruitprice.FieldID, field.TypeUUID))
	id, ok := fpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FruitPrice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fruitprice.FieldID)
		for _, f := range fields {
			if !fruitprice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fruitprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fruitprice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fpuo.mutation.CreatedBy(); ok {
		_spec.SetField(fruitprice.FieldCreatedBy, field.TypeString, value)
	}
	if fpuo.mutation.CreatedByCleared() {
		_spec.ClearField(fruitprice.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(fruitprice.FieldUpdatedBy, field.TypeString, value)
	}
	if fpuo.mutation.UpdatedByCleared() {
		_spec.ClearField(fruitprice.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fpuo.mutation.DeletedAt(); ok {
		_spec.SetField(fruitprice.FieldDeletedAt, field.TypeTime, value)
	}
	if fpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(fruitprice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fpuo.mutation.Name(); ok {
		_spec.SetField(fruitprice.FieldName, field.TypeString, value)
	}
	if value, ok := fpuo.mutation.Price(); ok {
		_spec.SetField(fruitprice.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := fpuo.mutation.AddedPrice(); ok {
		_spec.AddField(fruitprice.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := fpuo.mutation.Unit(); ok {
		_spec.SetField(fruitprice.FieldUnit, field.TypeString, value)
	}
	if value, ok := fpuo.mutation.Remark(); ok {
		_spec.SetField(fruitprice.FieldRemark, field.TypeString, value)
	}
	_node = &FruitPrice{config: fpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fruitprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fpuo.mutation.done = true
	return _node, nil
}
