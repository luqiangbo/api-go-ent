// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-go-ent/ent/fruitprice"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// FruitPrice is the model entity for the FruitPrice schema.
type FruitPrice struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID uuid.UUID `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建者
	CreatedBy string `json:"created_by,omitempty"`
	// 更新者
	UpdatedBy string `json:"updated_by,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 水果名称
	Name string `json:"name,omitempty"`
	// 价格
	Price float64 `json:"price,omitempty"`
	// 单位(如: kg, 个, 箱)
	Unit string `json:"unit,omitempty"`
	// 备注信息
	Remark       string `json:"remark,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FruitPrice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fruitprice.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case fruitprice.FieldCreatedBy, fruitprice.FieldUpdatedBy, fruitprice.FieldName, fruitprice.FieldUnit, fruitprice.FieldRemark:
			values[i] = new(sql.NullString)
		case fruitprice.FieldCreatedAt, fruitprice.FieldUpdatedAt, fruitprice.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case fruitprice.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FruitPrice fields.
func (fp *FruitPrice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fruitprice.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fp.ID = *value
			}
		case fruitprice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fp.CreatedAt = value.Time
			}
		case fruitprice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fp.UpdatedAt = value.Time
			}
		case fruitprice.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fp.CreatedBy = value.String
			}
		case fruitprice.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fp.UpdatedBy = value.String
			}
		case fruitprice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fp.DeletedAt = new(time.Time)
				*fp.DeletedAt = value.Time
			}
		case fruitprice.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fp.Name = value.String
			}
		case fruitprice.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				fp.Price = value.Float64
			}
		case fruitprice.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				fp.Unit = value.String
			}
		case fruitprice.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				fp.Remark = value.String
			}
		default:
			fp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FruitPrice.
// This includes values selected through modifiers, order, etc.
func (fp *FruitPrice) Value(name string) (ent.Value, error) {
	return fp.selectValues.Get(name)
}

// Update returns a builder for updating this FruitPrice.
// Note that you need to call FruitPrice.Unwrap() before calling this method if this FruitPrice
// was returned from a transaction, and the transaction was committed or rolled back.
func (fp *FruitPrice) Update() *FruitPriceUpdateOne {
	return NewFruitPriceClient(fp.config).UpdateOne(fp)
}

// Unwrap unwraps the FruitPrice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fp *FruitPrice) Unwrap() *FruitPrice {
	_tx, ok := fp.config.driver.(*txDriver)
	if !ok {
		panic("ent: FruitPrice is not a transactional entity")
	}
	fp.config.driver = _tx.drv
	return fp
}

// String implements the fmt.Stringer.
func (fp *FruitPrice) String() string {
	var builder strings.Builder
	builder.WriteString("FruitPrice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fp.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fp.UpdatedBy)
	builder.WriteString(", ")
	if v := fp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(fp.Name)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", fp.Price))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(fp.Unit)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(fp.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// FruitPrices is a parsable slice of FruitPrice.
type FruitPrices []*FruitPrice
