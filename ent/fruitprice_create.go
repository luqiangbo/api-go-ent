// Code generated by ent, DO NOT EDIT.

package ent

import (
	"api-go-ent/ent/fruitprice"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FruitPriceCreate is the builder for creating a FruitPrice entity.
type FruitPriceCreate struct {
	config
	mutation *FruitPriceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fpc *FruitPriceCreate) SetCreatedAt(t time.Time) *FruitPriceCreate {
	fpc.mutation.SetCreatedAt(t)
	return fpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fpc *FruitPriceCreate) SetNillableCreatedAt(t *time.Time) *FruitPriceCreate {
	if t != nil {
		fpc.SetCreatedAt(*t)
	}
	return fpc
}

// SetUpdatedAt sets the "updated_at" field.
func (fpc *FruitPriceCreate) SetUpdatedAt(t time.Time) *FruitPriceCreate {
	fpc.mutation.SetUpdatedAt(t)
	return fpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fpc *FruitPriceCreate) SetNillableUpdatedAt(t *time.Time) *FruitPriceCreate {
	if t != nil {
		fpc.SetUpdatedAt(*t)
	}
	return fpc
}

// SetCreatedBy sets the "created_by" field.
func (fpc *FruitPriceCreate) SetCreatedBy(s string) *FruitPriceCreate {
	fpc.mutation.SetCreatedBy(s)
	return fpc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fpc *FruitPriceCreate) SetNillableCreatedBy(s *string) *FruitPriceCreate {
	if s != nil {
		fpc.SetCreatedBy(*s)
	}
	return fpc
}

// SetUpdatedBy sets the "updated_by" field.
func (fpc *FruitPriceCreate) SetUpdatedBy(s string) *FruitPriceCreate {
	fpc.mutation.SetUpdatedBy(s)
	return fpc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fpc *FruitPriceCreate) SetNillableUpdatedBy(s *string) *FruitPriceCreate {
	if s != nil {
		fpc.SetUpdatedBy(*s)
	}
	return fpc
}

// SetDeletedAt sets the "deleted_at" field.
func (fpc *FruitPriceCreate) SetDeletedAt(t time.Time) *FruitPriceCreate {
	fpc.mutation.SetDeletedAt(t)
	return fpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fpc *FruitPriceCreate) SetNillableDeletedAt(t *time.Time) *FruitPriceCreate {
	if t != nil {
		fpc.SetDeletedAt(*t)
	}
	return fpc
}

// SetName sets the "name" field.
func (fpc *FruitPriceCreate) SetName(s string) *FruitPriceCreate {
	fpc.mutation.SetName(s)
	return fpc
}

// SetPrice sets the "price" field.
func (fpc *FruitPriceCreate) SetPrice(f float64) *FruitPriceCreate {
	fpc.mutation.SetPrice(f)
	return fpc
}

// SetUnit sets the "unit" field.
func (fpc *FruitPriceCreate) SetUnit(s string) *FruitPriceCreate {
	fpc.mutation.SetUnit(s)
	return fpc
}

// SetRemark sets the "remark" field.
func (fpc *FruitPriceCreate) SetRemark(s string) *FruitPriceCreate {
	fpc.mutation.SetRemark(s)
	return fpc
}

// SetID sets the "id" field.
func (fpc *FruitPriceCreate) SetID(u uuid.UUID) *FruitPriceCreate {
	fpc.mutation.SetID(u)
	return fpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fpc *FruitPriceCreate) SetNillableID(u *uuid.UUID) *FruitPriceCreate {
	if u != nil {
		fpc.SetID(*u)
	}
	return fpc
}

// Mutation returns the FruitPriceMutation object of the builder.
func (fpc *FruitPriceCreate) Mutation() *FruitPriceMutation {
	return fpc.mutation
}

// Save creates the FruitPrice in the database.
func (fpc *FruitPriceCreate) Save(ctx context.Context) (*FruitPrice, error) {
	fpc.defaults()
	return withHooks(ctx, fpc.sqlSave, fpc.mutation, fpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fpc *FruitPriceCreate) SaveX(ctx context.Context) *FruitPrice {
	v, err := fpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fpc *FruitPriceCreate) Exec(ctx context.Context) error {
	_, err := fpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpc *FruitPriceCreate) ExecX(ctx context.Context) {
	if err := fpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fpc *FruitPriceCreate) defaults() {
	if _, ok := fpc.mutation.CreatedAt(); !ok {
		v := fruitprice.DefaultCreatedAt()
		fpc.mutation.SetCreatedAt(v)
	}
	if _, ok := fpc.mutation.UpdatedAt(); !ok {
		v := fruitprice.DefaultUpdatedAt()
		fpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fpc.mutation.ID(); !ok {
		v := fruitprice.DefaultID()
		fpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fpc *FruitPriceCreate) check() error {
	if _, ok := fpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FruitPrice.created_at"`)}
	}
	if _, ok := fpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FruitPrice.updated_at"`)}
	}
	if _, ok := fpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FruitPrice.name"`)}
	}
	if v, ok := fpc.mutation.Name(); ok {
		if err := fruitprice.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.name": %w`, err)}
		}
	}
	if _, ok := fpc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "FruitPrice.price"`)}
	}
	if v, ok := fpc.mutation.Price(); ok {
		if err := fruitprice.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.price": %w`, err)}
		}
	}
	if _, ok := fpc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "FruitPrice.unit"`)}
	}
	if v, ok := fpc.mutation.Unit(); ok {
		if err := fruitprice.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.unit": %w`, err)}
		}
	}
	if _, ok := fpc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "FruitPrice.remark"`)}
	}
	if v, ok := fpc.mutation.Remark(); ok {
		if err := fruitprice.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: validator failed for field "FruitPrice.remark": %w`, err)}
		}
	}
	return nil
}

func (fpc *FruitPriceCreate) sqlSave(ctx context.Context) (*FruitPrice, error) {
	if err := fpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fpc.mutation.id = &_node.ID
	fpc.mutation.done = true
	return _node, nil
}

func (fpc *FruitPriceCreate) createSpec() (*FruitPrice, *sqlgraph.CreateSpec) {
	var (
		_node = &FruitPrice{config: fpc.config}
		_spec = sqlgraph.NewCreateSpec(fruitprice.Table, sqlgraph.NewFieldSpec(fruitprice.FieldID, field.TypeUUID))
	)
	if id, ok := fpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fpc.mutation.CreatedAt(); ok {
		_spec.SetField(fruitprice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fpc.mutation.UpdatedAt(); ok {
		_spec.SetField(fruitprice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fpc.mutation.CreatedBy(); ok {
		_spec.SetField(fruitprice.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := fpc.mutation.UpdatedBy(); ok {
		_spec.SetField(fruitprice.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := fpc.mutation.DeletedAt(); ok {
		_spec.SetField(fruitprice.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := fpc.mutation.Name(); ok {
		_spec.SetField(fruitprice.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fpc.mutation.Price(); ok {
		_spec.SetField(fruitprice.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := fpc.mutation.Unit(); ok {
		_spec.SetField(fruitprice.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := fpc.mutation.Remark(); ok {
		_spec.SetField(fruitprice.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// FruitPriceCreateBulk is the builder for creating many FruitPrice entities in bulk.
type FruitPriceCreateBulk struct {
	config
	err      error
	builders []*FruitPriceCreate
}

// Save creates the FruitPrice entities in the database.
func (fpcb *FruitPriceCreateBulk) Save(ctx context.Context) ([]*FruitPrice, error) {
	if fpcb.err != nil {
		return nil, fpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fpcb.builders))
	nodes := make([]*FruitPrice, len(fpcb.builders))
	mutators := make([]Mutator, len(fpcb.builders))
	for i := range fpcb.builders {
		func(i int, root context.Context) {
			builder := fpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FruitPriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fpcb *FruitPriceCreateBulk) SaveX(ctx context.Context) []*FruitPrice {
	v, err := fpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fpcb *FruitPriceCreateBulk) Exec(ctx context.Context) error {
	_, err := fpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fpcb *FruitPriceCreateBulk) ExecX(ctx context.Context) {
	if err := fpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
